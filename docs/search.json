[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Function of the Week",
    "section": "",
    "text": "Function of the Week\n\nBSTA526 Winter 2024\n\nR Programming for Health Data Science\nOHSU-PSU School of Public Health\nOregon Health & Science University\n\n\n\n\n\n\n\n\n\n\n\n\n View the source on GitHub"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Functions of the Week",
    "section": "",
    "text": "Below are links to students’ Function of the Week submissions.\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\n\n\n\n\n2/7/24\n\n\nn_distinct\n\n\nThe n_distinct() function counts the number of unique values in a vector\n\n\n\n\nInvalid Date\n\n\ndplyr::slice_sample\n\n\nUpdate with brief descirption of function\n\n\n\n\n2/7/24\n\n\nlubridate::ceiling_date()\n\n\nUsed for rounding a given date-time object up to the nearest boundary of a specified time unit\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "presentations/function_of_the_week_ECHALUSE.html",
    "href": "presentations/function_of_the_week_ECHALUSE.html",
    "title": "lubridate::ceiling_date()",
    "section": "",
    "text": "In this document, I will introduce the ceiling_date() function and show what it’s for.\n\nlibrary(lubridate)\n\n\n\nThe ceiling_date() function is part of the lubridate package. It is used for rounding a given date-time object up to the nearest boundary of a specified time unit.\nThe term  ceiling  means rounding up, and users can specify rounding up to the nearest second, minute, hour, day, week, month, or year.\n\nceiling_date(x, unit=c(\"second\", \"minute\", \"hour\", \"day\",\n    \"week\", \"month\", \"year\"))\n\n\n x  is a vector of date-time objects.\n unit  is a string, period object, or date-time object rounded to the nearest boundary of a specific time unit.\n\n\n\nExample #1\n\n\n# format: year/month/day hour/minute/second\nx &lt;- ymd_hms(\"2009-08-03 12:01:59.23\") # Monday\n\n\n# rounding\nceiling_date(x, \"second\")\n\n[1] \"2009-08-03 12:02:00 UTC\"\n\nceiling_date(x, \"minute\")\n\n[1] \"2009-08-03 12:02:00 UTC\"\n\nceiling_date(x, \"5 mins\")\n\n[1] \"2009-08-03 12:05:00 UTC\"\n\nceiling_date(x, \"hour\")\n\n[1] \"2009-08-03 13:00:00 UTC\"\n\nceiling_date(x, \"2 hours\")\n\n[1] \"2009-08-03 14:00:00 UTC\"\n\nceiling_date(x, \"day\") # Tuesday\n\n[1] \"2009-08-04 UTC\"\n\nceiling_date(x, \"week\") # Saturday\n\n[1] \"2009-08-09 UTC\"\n\nceiling_date(x, \"month\")\n\n[1] \"2009-09-01 UTC\"\n\nceiling_date(x, \"year\")\n\n[1] \"2010-01-01 UTC\"\n\n\nReference:\n1. https://lubridate.tidyverse.org/reference/round_date.html\n2. RDocumentation\n\n\nExample #2\n\n\nlibrary(nycflights13)\ndata(flights)\nnames(flights)\n\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\"\n [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"       \n[13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n\nhead(flights)\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# To convert date and time information into a more standard datetime format.\n# We write a `function()` with parameters: year, month, day, and time.\n# Use `lubridate::make_datetime()` to create a new datetime object (make_datetime_100). \n# The time format is in HHMM and splits the time into hours (time %/% 100) and minutes (time %% 100).\n\nmake_datetime_100 &lt;- function(year, month, day, time) {\n  make_datetime(year, month, day, time %/% 100, time %% 100)\n}\n\n\n# Rows with missing departure or arrival times are filtered out. \n# Use `mutate` to create new columns:\n# departure time, arrival time, scheduled departure time, and scheduled arrival time. \n# The make_datetime_100 function is applied to, and after select columns:\n# origin, destination, columns ending with \"delay,\" and columns ending with \"time\".\n\nflights_dt &lt;- flights %&gt;% \n  filter(!is.na(dep_time), !is.na(arr_time)) %&gt;% \n  mutate(dep_time = make_datetime_100(year, month, day, dep_time),\n         arr_time = make_datetime_100(year, month, day, arr_time),\n         sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),\n         sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %&gt;%\n  select(origin, dest, ends_with(\"delay\"), ends_with(\"time\"))\n\n\n# Check\nhead(flights_dt)\n\n# A tibble: 6 × 9\n  origin dest  dep_delay arr_delay dep_time            sched_dep_time     \n  &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dttm&gt;              &lt;dttm&gt;             \n1 EWR    IAH           2        11 2013-01-01 05:17:00 2013-01-01 05:15:00\n2 LGA    IAH           4        20 2013-01-01 05:33:00 2013-01-01 05:29:00\n3 JFK    MIA           2        33 2013-01-01 05:42:00 2013-01-01 05:40:00\n4 JFK    BQN          -1       -18 2013-01-01 05:44:00 2013-01-01 05:45:00\n5 LGA    ATL          -6       -25 2013-01-01 05:54:00 2013-01-01 06:00:00\n6 EWR    ORD          -4        12 2013-01-01 05:54:00 2013-01-01 05:58:00\n# ℹ 3 more variables: arr_time &lt;dttm&gt;, sched_arr_time &lt;dttm&gt;, air_time &lt;dbl&gt;\n\nskim(flights_dt)\n\n\nData summary\n\n\nName\nflights_dt\n\n\nNumber of rows\n328063\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\nPOSIXct\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\norigin\n0\n1\n3\n3\n0\n3\n0\n\n\ndest\n0\n1\n3\n3\n0\n104\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndep_delay\n0\n1\n12.58\n40.09\n-43\n-5\n-2\n11\n1301\n▇▁▁▁▁\n\n\narr_delay\n717\n1\n6.90\n44.63\n-86\n-17\n-5\n14\n1272\n▇▁▁▁▁\n\n\nair_time\n717\n1\n150.69\n93.69\n20\n82\n129\n192\n695\n▇▂▂▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ndep_time\n0\n1\n2013-01-01 05:17:00\n2013-12-31 23:56:00\n2013-07-04 09:12:00\n211509\n\n\nsched_dep_time\n0\n1\n2013-01-01 05:15:00\n2013-12-31 23:59:00\n2013-07-04 09:15:00\n125557\n\n\narr_time\n0\n1\n2013-01-01 00:03:00\n2014-01-01 00:00:00\n2013-07-04 11:06:00\n220332\n\n\nsched_arr_time\n0\n1\n2013-01-01 00:05:00\n2013-12-31 23:59:00\n2013-07-04 11:20:00\n204384\n\n\n\n\n\n\n# Plot: Departure time\nggplot(flights_dt, aes(x = dep_time)) +\n  geom_histogram(binwidth = 3600, color = \"purple\", alpha = 0.7) +\n  labs(title = \"Departure Time Distribution\",\n       x = \"Departure Time\",\n       y = \"Frequency\")\n\n\n\n\n\n# Plot: Departure for each week\nflights_dt %&gt;% \n  count(week = ceiling_date(dep_time, \"week\")) %&gt;% \n  ggplot(aes(week, n)) +\n    geom_line(color = \"purple\") +\n    theme_minimal() +\n    labs(title = \"Flight Departure per Week\",\n         x = \"Week\",\n         y = \"Count\",\n         color = \"Line Color\")\n\n\n\n\n\n# Plot: Departure for each month\nflights_dt %&gt;% \n  count(month = ceiling_date(dep_time, \"month\")) %&gt;% \n  ggplot(aes(month, n)) +\n    geom_line(color = \"purple\") +\n    theme_minimal() +\n    labs(title = \"Flight Departure per Month\",\n         x = \"Month\",\n         y = \"Count\",\n         color = \"Line Color\")\n\n\n\n\nInstead of plotting the original departure time, we can round up to a nearby unit of time using ceiling_date(), and allows us to plot the number of flights per week and per month.\nReference:\n1. R for Data Science. https://r4ds.had.co.nz/dates-and-times.html\n2. How to Write Fuctions in R\n\n\n\nYes, it is useful in representing time in plots and can offer insights into patterns and/or trends over different time intervals. This can be especially true for large datasets where ceiling_date() can be used to simplify and group dates to provide a more concise and interpretable representation of trends. I don’t use this everyday, but I do think it is pretty neat!"
  },
  {
    "objectID": "presentations/function_of_the_week_ECHALUSE.html#what-is-it-for",
    "href": "presentations/function_of_the_week_ECHALUSE.html#what-is-it-for",
    "title": "lubridate::ceiling_date()",
    "section": "",
    "text": "The ceiling_date() function is part of the lubridate package. It is used for rounding a given date-time object up to the nearest boundary of a specified time unit.\nThe term  ceiling  means rounding up, and users can specify rounding up to the nearest second, minute, hour, day, week, month, or year.\n\nceiling_date(x, unit=c(\"second\", \"minute\", \"hour\", \"day\",\n    \"week\", \"month\", \"year\"))\n\n\n x  is a vector of date-time objects.\n unit  is a string, period object, or date-time object rounded to the nearest boundary of a specific time unit.\n\n\n\nExample #1\n\n\n# format: year/month/day hour/minute/second\nx &lt;- ymd_hms(\"2009-08-03 12:01:59.23\") # Monday\n\n\n# rounding\nceiling_date(x, \"second\")\n\n[1] \"2009-08-03 12:02:00 UTC\"\n\nceiling_date(x, \"minute\")\n\n[1] \"2009-08-03 12:02:00 UTC\"\n\nceiling_date(x, \"5 mins\")\n\n[1] \"2009-08-03 12:05:00 UTC\"\n\nceiling_date(x, \"hour\")\n\n[1] \"2009-08-03 13:00:00 UTC\"\n\nceiling_date(x, \"2 hours\")\n\n[1] \"2009-08-03 14:00:00 UTC\"\n\nceiling_date(x, \"day\") # Tuesday\n\n[1] \"2009-08-04 UTC\"\n\nceiling_date(x, \"week\") # Saturday\n\n[1] \"2009-08-09 UTC\"\n\nceiling_date(x, \"month\")\n\n[1] \"2009-09-01 UTC\"\n\nceiling_date(x, \"year\")\n\n[1] \"2010-01-01 UTC\"\n\n\nReference:\n1. https://lubridate.tidyverse.org/reference/round_date.html\n2. RDocumentation\n\n\nExample #2\n\n\nlibrary(nycflights13)\ndata(flights)\nnames(flights)\n\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\"\n [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"       \n[13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n\nhead(flights)\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# To convert date and time information into a more standard datetime format.\n# We write a `function()` with parameters: year, month, day, and time.\n# Use `lubridate::make_datetime()` to create a new datetime object (make_datetime_100). \n# The time format is in HHMM and splits the time into hours (time %/% 100) and minutes (time %% 100).\n\nmake_datetime_100 &lt;- function(year, month, day, time) {\n  make_datetime(year, month, day, time %/% 100, time %% 100)\n}\n\n\n# Rows with missing departure or arrival times are filtered out. \n# Use `mutate` to create new columns:\n# departure time, arrival time, scheduled departure time, and scheduled arrival time. \n# The make_datetime_100 function is applied to, and after select columns:\n# origin, destination, columns ending with \"delay,\" and columns ending with \"time\".\n\nflights_dt &lt;- flights %&gt;% \n  filter(!is.na(dep_time), !is.na(arr_time)) %&gt;% \n  mutate(dep_time = make_datetime_100(year, month, day, dep_time),\n         arr_time = make_datetime_100(year, month, day, arr_time),\n         sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),\n         sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %&gt;%\n  select(origin, dest, ends_with(\"delay\"), ends_with(\"time\"))\n\n\n# Check\nhead(flights_dt)\n\n# A tibble: 6 × 9\n  origin dest  dep_delay arr_delay dep_time            sched_dep_time     \n  &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dttm&gt;              &lt;dttm&gt;             \n1 EWR    IAH           2        11 2013-01-01 05:17:00 2013-01-01 05:15:00\n2 LGA    IAH           4        20 2013-01-01 05:33:00 2013-01-01 05:29:00\n3 JFK    MIA           2        33 2013-01-01 05:42:00 2013-01-01 05:40:00\n4 JFK    BQN          -1       -18 2013-01-01 05:44:00 2013-01-01 05:45:00\n5 LGA    ATL          -6       -25 2013-01-01 05:54:00 2013-01-01 06:00:00\n6 EWR    ORD          -4        12 2013-01-01 05:54:00 2013-01-01 05:58:00\n# ℹ 3 more variables: arr_time &lt;dttm&gt;, sched_arr_time &lt;dttm&gt;, air_time &lt;dbl&gt;\n\nskim(flights_dt)\n\n\nData summary\n\n\nName\nflights_dt\n\n\nNumber of rows\n328063\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\nPOSIXct\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\norigin\n0\n1\n3\n3\n0\n3\n0\n\n\ndest\n0\n1\n3\n3\n0\n104\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndep_delay\n0\n1\n12.58\n40.09\n-43\n-5\n-2\n11\n1301\n▇▁▁▁▁\n\n\narr_delay\n717\n1\n6.90\n44.63\n-86\n-17\n-5\n14\n1272\n▇▁▁▁▁\n\n\nair_time\n717\n1\n150.69\n93.69\n20\n82\n129\n192\n695\n▇▂▂▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ndep_time\n0\n1\n2013-01-01 05:17:00\n2013-12-31 23:56:00\n2013-07-04 09:12:00\n211509\n\n\nsched_dep_time\n0\n1\n2013-01-01 05:15:00\n2013-12-31 23:59:00\n2013-07-04 09:15:00\n125557\n\n\narr_time\n0\n1\n2013-01-01 00:03:00\n2014-01-01 00:00:00\n2013-07-04 11:06:00\n220332\n\n\nsched_arr_time\n0\n1\n2013-01-01 00:05:00\n2013-12-31 23:59:00\n2013-07-04 11:20:00\n204384\n\n\n\n\n\n\n# Plot: Departure time\nggplot(flights_dt, aes(x = dep_time)) +\n  geom_histogram(binwidth = 3600, color = \"purple\", alpha = 0.7) +\n  labs(title = \"Departure Time Distribution\",\n       x = \"Departure Time\",\n       y = \"Frequency\")\n\n\n\n\n\n# Plot: Departure for each week\nflights_dt %&gt;% \n  count(week = ceiling_date(dep_time, \"week\")) %&gt;% \n  ggplot(aes(week, n)) +\n    geom_line(color = \"purple\") +\n    theme_minimal() +\n    labs(title = \"Flight Departure per Week\",\n         x = \"Week\",\n         y = \"Count\",\n         color = \"Line Color\")\n\n\n\n\n\n# Plot: Departure for each month\nflights_dt %&gt;% \n  count(month = ceiling_date(dep_time, \"month\")) %&gt;% \n  ggplot(aes(month, n)) +\n    geom_line(color = \"purple\") +\n    theme_minimal() +\n    labs(title = \"Flight Departure per Month\",\n         x = \"Month\",\n         y = \"Count\",\n         color = \"Line Color\")\n\n\n\n\nInstead of plotting the original departure time, we can round up to a nearby unit of time using ceiling_date(), and allows us to plot the number of flights per week and per month.\nReference:\n1. R for Data Science. https://r4ds.had.co.nz/dates-and-times.html\n2. How to Write Fuctions in R"
  },
  {
    "objectID": "presentations/function_of_the_week_ECHALUSE.html#is-it-helpful",
    "href": "presentations/function_of_the_week_ECHALUSE.html#is-it-helpful",
    "title": "lubridate::ceiling_date()",
    "section": "",
    "text": "Yes, it is useful in representing time in plots and can offer insights into patterns and/or trends over different time intervals. This can be especially true for large datasets where ceiling_date() can be used to simplify and group dates to provide a more concise and interpretable representation of trends. I don’t use this everyday, but I do think it is pretty neat!"
  },
  {
    "objectID": "presentations/function_of_the_week_McMonigal.html",
    "href": "presentations/function_of_the_week_McMonigal.html",
    "title": "n_distinct",
    "section": "",
    "text": "In this document, I will introduce the n_distinct() function from dplyr and show what it’s for.\n\n#load dplyr\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n#example dataset\ndata(starwars)\n\n\n\nThe n_distinct() function counts the number of unique values in a vector or set of vectors. It has two arguments:\n\n... : One or more vectors from your dataset.\nna.rm : Can equal TRUE or FALSE.\n\nThe default is na.rm = FALSE, meaning missing values are included in the count of distinct values by default. If TRUE, missing values will be excluded from the count of distinct values.\n\n\n\n\n#Let's see what is in our dataset.\nglimpse(starwars)\n\nRows: 87\nColumns: 14\n$ name       &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color &lt;chr&gt; \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color &lt;chr&gt; \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  &lt;chr&gt; \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        &lt;chr&gt; \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     &lt;chr&gt; \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  &lt;chr&gt; \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      &lt;list&gt; &lt;\"The Empire Strikes Back\", \"Revenge of the Sith\", \"Return…\n$ vehicles   &lt;list&gt; &lt;\"Snowspeeder\", \"Imperial Speeder Bike\"&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, \"Imp…\n$ starships  &lt;list&gt; &lt;\"X-wing\", \"Imperial shuttle\"&gt;, &lt;&gt;, &lt;&gt;, \"TIE Advanced x1\",…\n\n\n\n#Let's use n_distinct on a categorical variable, such as species.\nn_distinct(starwars$species)\n\n[1] 38\n\n\n\n#Let's examine how na.rm works.\nn_distinct(starwars$hair_color, na.rm = FALSE)\n\n[1] 13\n\n\n\n#Now let's change to na.rm = TRUE\nn_distinct(starwars$hair_color, na.rm = TRUE)\n\n[1] 12\n\n\n\n#Let's try with multiple vectors. Missing values will be included in the count.\nn_distinct(starwars$hair_color, starwars$eye_color)\n\n[1] 35\n\n\n\n#What are the distinct pairs?\nstarwars %&gt;% distinct(eye_color, hair_color)\n\n# A tibble: 35 × 2\n   eye_color hair_color   \n   &lt;chr&gt;     &lt;chr&gt;        \n 1 blue      blond        \n 2 yellow    &lt;NA&gt;         \n 3 red       &lt;NA&gt;         \n 4 yellow    none         \n 5 brown     brown        \n 6 blue      brown, grey  \n 7 blue      brown        \n 8 brown     black        \n 9 blue-gray auburn, white\n10 blue      auburn, grey \n# ℹ 25 more rows\n\n(tibble1 &lt;- starwars %&gt;% group_by(eye_color) %&gt;%\n  summarise(count = n_distinct(hair_color)))\n\n# A tibble: 15 × 2\n   eye_color     count\n   &lt;chr&gt;         &lt;int&gt;\n 1 black             2\n 2 blue              8\n 3 blue-gray         1\n 4 brown             4\n 5 dark              1\n 6 gold              1\n 7 green, yellow     1\n 8 hazel             2\n 9 orange            2\n10 pink              1\n11 red               2\n12 red, blue         1\n13 unknown           2\n14 white             1\n15 yellow            6\n\nsum(tibble1$count)\n\n[1] 35\n\n\n\n\n\nThe function n_distinct() is helpful for data exploration for categorical variables because it quickly counts the number of distinct values.\nHowever, n_distinct() on its own is not very powerful, and the function is more helpful when used in combination with other functions."
  },
  {
    "objectID": "presentations/function_of_the_week_McMonigal.html#what-is-it-for",
    "href": "presentations/function_of_the_week_McMonigal.html#what-is-it-for",
    "title": "n_distinct",
    "section": "",
    "text": "The n_distinct() function counts the number of unique values in a vector or set of vectors. It has two arguments:\n\n... : One or more vectors from your dataset.\nna.rm : Can equal TRUE or FALSE.\n\nThe default is na.rm = FALSE, meaning missing values are included in the count of distinct values by default. If TRUE, missing values will be excluded from the count of distinct values."
  },
  {
    "objectID": "presentations/function_of_the_week_McMonigal.html#example-using-starwars",
    "href": "presentations/function_of_the_week_McMonigal.html#example-using-starwars",
    "title": "n_distinct",
    "section": "",
    "text": "#Let's see what is in our dataset.\nglimpse(starwars)\n\nRows: 87\nColumns: 14\n$ name       &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color &lt;chr&gt; \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color &lt;chr&gt; \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  &lt;chr&gt; \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        &lt;chr&gt; \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     &lt;chr&gt; \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  &lt;chr&gt; \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      &lt;list&gt; &lt;\"The Empire Strikes Back\", \"Revenge of the Sith\", \"Return…\n$ vehicles   &lt;list&gt; &lt;\"Snowspeeder\", \"Imperial Speeder Bike\"&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, \"Imp…\n$ starships  &lt;list&gt; &lt;\"X-wing\", \"Imperial shuttle\"&gt;, &lt;&gt;, &lt;&gt;, \"TIE Advanced x1\",…\n\n\n\n#Let's use n_distinct on a categorical variable, such as species.\nn_distinct(starwars$species)\n\n[1] 38\n\n\n\n#Let's examine how na.rm works.\nn_distinct(starwars$hair_color, na.rm = FALSE)\n\n[1] 13\n\n\n\n#Now let's change to na.rm = TRUE\nn_distinct(starwars$hair_color, na.rm = TRUE)\n\n[1] 12\n\n\n\n#Let's try with multiple vectors. Missing values will be included in the count.\nn_distinct(starwars$hair_color, starwars$eye_color)\n\n[1] 35\n\n\n\n#What are the distinct pairs?\nstarwars %&gt;% distinct(eye_color, hair_color)\n\n# A tibble: 35 × 2\n   eye_color hair_color   \n   &lt;chr&gt;     &lt;chr&gt;        \n 1 blue      blond        \n 2 yellow    &lt;NA&gt;         \n 3 red       &lt;NA&gt;         \n 4 yellow    none         \n 5 brown     brown        \n 6 blue      brown, grey  \n 7 blue      brown        \n 8 brown     black        \n 9 blue-gray auburn, white\n10 blue      auburn, grey \n# ℹ 25 more rows\n\n(tibble1 &lt;- starwars %&gt;% group_by(eye_color) %&gt;%\n  summarise(count = n_distinct(hair_color)))\n\n# A tibble: 15 × 2\n   eye_color     count\n   &lt;chr&gt;         &lt;int&gt;\n 1 black             2\n 2 blue              8\n 3 blue-gray         1\n 4 brown             4\n 5 dark              1\n 6 gold              1\n 7 green, yellow     1\n 8 hazel             2\n 9 orange            2\n10 pink              1\n11 red               2\n12 red, blue         1\n13 unknown           2\n14 white             1\n15 yellow            6\n\nsum(tibble1$count)\n\n[1] 35"
  },
  {
    "objectID": "presentations/function_of_the_week_McMonigal.html#is-n_distinct-helpful",
    "href": "presentations/function_of_the_week_McMonigal.html#is-n_distinct-helpful",
    "title": "n_distinct",
    "section": "",
    "text": "The function n_distinct() is helpful for data exploration for categorical variables because it quickly counts the number of distinct values.\nHowever, n_distinct() on its own is not very powerful, and the function is more helpful when used in combination with other functions."
  },
  {
    "objectID": "function_of_the_week_ECHALUSE.html",
    "href": "function_of_the_week_ECHALUSE.html",
    "title": "lubridate::ceiling_date()",
    "section": "",
    "text": "In this document, I will introduce the ceiling_date() function and show what it’s for.\n\nlibrary(lubridate)\n\n\n\nThe ceiling_date() function is part of the lubridate package. It is used for rounding a given date-time object up to the nearest boundary of a specified time unit.\nThe term  ceiling  means rounding up, and users can specify rounding up to the nearest second, minute, hour, day, week, month, or year.\n\nceiling_date(x, unit=c(\"second\", \"minute\", \"hour\", \"day\",\n    \"week\", \"month\", \"year\"))\n\n\n x  is a vector of date-time objects.\n unit  is a string, period object, or date-time object rounded to the nearest boundary of a specific time unit.\n\n\n\nExample #1\n\n\n# format: year/month/day hour/minute/second\nx &lt;- ymd_hms(\"2009-08-03 12:01:59.23\") # Monday\n\n\n# rounding\nceiling_date(x, \"second\")\n\n[1] \"2009-08-03 12:02:00 UTC\"\n\nceiling_date(x, \"minute\")\n\n[1] \"2009-08-03 12:02:00 UTC\"\n\nceiling_date(x, \"5 mins\")\n\n[1] \"2009-08-03 12:05:00 UTC\"\n\nceiling_date(x, \"hour\")\n\n[1] \"2009-08-03 13:00:00 UTC\"\n\nceiling_date(x, \"2 hours\")\n\n[1] \"2009-08-03 14:00:00 UTC\"\n\nceiling_date(x, \"day\") # Tuesday\n\n[1] \"2009-08-04 UTC\"\n\nceiling_date(x, \"week\") # Saturday\n\n[1] \"2009-08-09 UTC\"\n\nceiling_date(x, \"month\")\n\n[1] \"2009-09-01 UTC\"\n\nceiling_date(x, \"year\")\n\n[1] \"2010-01-01 UTC\"\n\n\nReference:\n1. https://lubridate.tidyverse.org/reference/round_date.html\n2. RDocumentation\n\n\nExample #2\n\n\nlibrary(nycflights13)\ndata(flights)\nnames(flights)\n\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\"\n [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"       \n[13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n\nhead(flights)\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# To convert date and time information into a more standard datetime format.\n# We write a `function()` with parameters: year, month, day, and time.\n# Use `lubridate::make_datetime()` to create a new datetime object (make_datetime_100). \n# The time format is in HHMM and splits the time into hours (time %/% 100) and minutes (time %% 100).\n\nmake_datetime_100 &lt;- function(year, month, day, time) {\n  make_datetime(year, month, day, time %/% 100, time %% 100)\n}\n\n\n# Rows with missing departure or arrival times are filtered out. \n# Use `mutate` to create new columns:\n# departure time, arrival time, scheduled departure time, and scheduled arrival time. \n# The make_datetime_100 function is applied to, and after select columns:\n# origin, destination, columns ending with \"delay,\" and columns ending with \"time\".\n\nflights_dt &lt;- flights %&gt;% \n  filter(!is.na(dep_time), !is.na(arr_time)) %&gt;% \n  mutate(dep_time = make_datetime_100(year, month, day, dep_time),\n         arr_time = make_datetime_100(year, month, day, arr_time),\n         sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),\n         sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %&gt;%\n  select(origin, dest, ends_with(\"delay\"), ends_with(\"time\"))\n\n\n# Check\nhead(flights_dt)\n\n# A tibble: 6 × 9\n  origin dest  dep_delay arr_delay dep_time            sched_dep_time     \n  &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dttm&gt;              &lt;dttm&gt;             \n1 EWR    IAH           2        11 2013-01-01 05:17:00 2013-01-01 05:15:00\n2 LGA    IAH           4        20 2013-01-01 05:33:00 2013-01-01 05:29:00\n3 JFK    MIA           2        33 2013-01-01 05:42:00 2013-01-01 05:40:00\n4 JFK    BQN          -1       -18 2013-01-01 05:44:00 2013-01-01 05:45:00\n5 LGA    ATL          -6       -25 2013-01-01 05:54:00 2013-01-01 06:00:00\n6 EWR    ORD          -4        12 2013-01-01 05:54:00 2013-01-01 05:58:00\n# ℹ 3 more variables: arr_time &lt;dttm&gt;, sched_arr_time &lt;dttm&gt;, air_time &lt;dbl&gt;\n\nskim(flights_dt)\n\n\nData summary\n\n\nName\nflights_dt\n\n\nNumber of rows\n328063\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\nPOSIXct\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\norigin\n0\n1\n3\n3\n0\n3\n0\n\n\ndest\n0\n1\n3\n3\n0\n104\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndep_delay\n0\n1\n12.58\n40.09\n-43\n-5\n-2\n11\n1301\n▇▁▁▁▁\n\n\narr_delay\n717\n1\n6.90\n44.63\n-86\n-17\n-5\n14\n1272\n▇▁▁▁▁\n\n\nair_time\n717\n1\n150.69\n93.69\n20\n82\n129\n192\n695\n▇▂▂▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ndep_time\n0\n1\n2013-01-01 05:17:00\n2013-12-31 23:56:00\n2013-07-04 09:12:00\n211509\n\n\nsched_dep_time\n0\n1\n2013-01-01 05:15:00\n2013-12-31 23:59:00\n2013-07-04 09:15:00\n125557\n\n\narr_time\n0\n1\n2013-01-01 00:03:00\n2014-01-01 00:00:00\n2013-07-04 11:06:00\n220332\n\n\nsched_arr_time\n0\n1\n2013-01-01 00:05:00\n2013-12-31 23:59:00\n2013-07-04 11:20:00\n204384\n\n\n\n\n\n\n# Plot: Departure time\nggplot(flights_dt, aes(x = dep_time)) +\n  geom_histogram(binwidth = 3600, color = \"purple\", alpha = 0.7) +\n  labs(title = \"Departure Time Distribution\",\n       x = \"Departure Time\",\n       y = \"Frequency\")\n\n\n\n\n\n# Plot: Departure for each week\nflights_dt %&gt;% \n  count(week = ceiling_date(dep_time, \"week\")) %&gt;% \n  ggplot(aes(week, n)) +\n    geom_line(color = \"purple\") +\n    theme_minimal() +\n    labs(title = \"Flight Departure per Week\",\n         x = \"Week\",\n         y = \"Count\",\n         color = \"Line Color\")\n\n\n\n\n\n# Plot: Departure for each month\nflights_dt %&gt;% \n  count(month = ceiling_date(dep_time, \"month\")) %&gt;% \n  ggplot(aes(month, n)) +\n    geom_line(color = \"purple\") +\n    theme_minimal() +\n    labs(title = \"Flight Departure per Month\",\n         x = \"Month\",\n         y = \"Count\",\n         color = \"Line Color\")\n\n\n\n\nInstead of plotting the original departure time, we can round up to a nearby unit of time using ceiling_date(), and allows us to plot the number of flights per week and per month.\nReference:\n1. R for Data Science. https://r4ds.had.co.nz/dates-and-times.html\n2. How to Write Fuctions in R\n\n\n\nYes, it is useful in representing time in plots and can offer insights into patterns and/or trends over different time intervals. This can be especially true for large datasets where ceiling_date() can be used to simplify and group dates to provide a more concise and interpretable representation of trends. I don’t use this everyday, but I do think it is pretty neat!"
  },
  {
    "objectID": "function_of_the_week_ECHALUSE.html#what-is-it-for",
    "href": "function_of_the_week_ECHALUSE.html#what-is-it-for",
    "title": "lubridate::ceiling_date()",
    "section": "",
    "text": "The ceiling_date() function is part of the lubridate package. It is used for rounding a given date-time object up to the nearest boundary of a specified time unit.\nThe term  ceiling  means rounding up, and users can specify rounding up to the nearest second, minute, hour, day, week, month, or year.\n\nceiling_date(x, unit=c(\"second\", \"minute\", \"hour\", \"day\",\n    \"week\", \"month\", \"year\"))\n\n\n x  is a vector of date-time objects.\n unit  is a string, period object, or date-time object rounded to the nearest boundary of a specific time unit.\n\n\n\nExample #1\n\n\n# format: year/month/day hour/minute/second\nx &lt;- ymd_hms(\"2009-08-03 12:01:59.23\") # Monday\n\n\n# rounding\nceiling_date(x, \"second\")\n\n[1] \"2009-08-03 12:02:00 UTC\"\n\nceiling_date(x, \"minute\")\n\n[1] \"2009-08-03 12:02:00 UTC\"\n\nceiling_date(x, \"5 mins\")\n\n[1] \"2009-08-03 12:05:00 UTC\"\n\nceiling_date(x, \"hour\")\n\n[1] \"2009-08-03 13:00:00 UTC\"\n\nceiling_date(x, \"2 hours\")\n\n[1] \"2009-08-03 14:00:00 UTC\"\n\nceiling_date(x, \"day\") # Tuesday\n\n[1] \"2009-08-04 UTC\"\n\nceiling_date(x, \"week\") # Saturday\n\n[1] \"2009-08-09 UTC\"\n\nceiling_date(x, \"month\")\n\n[1] \"2009-09-01 UTC\"\n\nceiling_date(x, \"year\")\n\n[1] \"2010-01-01 UTC\"\n\n\nReference:\n1. https://lubridate.tidyverse.org/reference/round_date.html\n2. RDocumentation\n\n\nExample #2\n\n\nlibrary(nycflights13)\ndata(flights)\nnames(flights)\n\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\"\n [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"       \n[13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n\nhead(flights)\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n# To convert date and time information into a more standard datetime format.\n# We write a `function()` with parameters: year, month, day, and time.\n# Use `lubridate::make_datetime()` to create a new datetime object (make_datetime_100). \n# The time format is in HHMM and splits the time into hours (time %/% 100) and minutes (time %% 100).\n\nmake_datetime_100 &lt;- function(year, month, day, time) {\n  make_datetime(year, month, day, time %/% 100, time %% 100)\n}\n\n\n# Rows with missing departure or arrival times are filtered out. \n# Use `mutate` to create new columns:\n# departure time, arrival time, scheduled departure time, and scheduled arrival time. \n# The make_datetime_100 function is applied to, and after select columns:\n# origin, destination, columns ending with \"delay,\" and columns ending with \"time\".\n\nflights_dt &lt;- flights %&gt;% \n  filter(!is.na(dep_time), !is.na(arr_time)) %&gt;% \n  mutate(dep_time = make_datetime_100(year, month, day, dep_time),\n         arr_time = make_datetime_100(year, month, day, arr_time),\n         sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),\n         sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %&gt;%\n  select(origin, dest, ends_with(\"delay\"), ends_with(\"time\"))\n\n\n# Check\nhead(flights_dt)\n\n# A tibble: 6 × 9\n  origin dest  dep_delay arr_delay dep_time            sched_dep_time     \n  &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dttm&gt;              &lt;dttm&gt;             \n1 EWR    IAH           2        11 2013-01-01 05:17:00 2013-01-01 05:15:00\n2 LGA    IAH           4        20 2013-01-01 05:33:00 2013-01-01 05:29:00\n3 JFK    MIA           2        33 2013-01-01 05:42:00 2013-01-01 05:40:00\n4 JFK    BQN          -1       -18 2013-01-01 05:44:00 2013-01-01 05:45:00\n5 LGA    ATL          -6       -25 2013-01-01 05:54:00 2013-01-01 06:00:00\n6 EWR    ORD          -4        12 2013-01-01 05:54:00 2013-01-01 05:58:00\n# ℹ 3 more variables: arr_time &lt;dttm&gt;, sched_arr_time &lt;dttm&gt;, air_time &lt;dbl&gt;\n\nskim(flights_dt)\n\n\nData summary\n\n\nName\nflights_dt\n\n\nNumber of rows\n328063\n\n\nNumber of columns\n9\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\nPOSIXct\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\norigin\n0\n1\n3\n3\n0\n3\n0\n\n\ndest\n0\n1\n3\n3\n0\n104\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndep_delay\n0\n1\n12.58\n40.09\n-43\n-5\n-2\n11\n1301\n▇▁▁▁▁\n\n\narr_delay\n717\n1\n6.90\n44.63\n-86\n-17\n-5\n14\n1272\n▇▁▁▁▁\n\n\nair_time\n717\n1\n150.69\n93.69\n20\n82\n129\n192\n695\n▇▂▂▁▁\n\n\n\nVariable type: POSIXct\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ndep_time\n0\n1\n2013-01-01 05:17:00\n2013-12-31 23:56:00\n2013-07-04 09:12:00\n211509\n\n\nsched_dep_time\n0\n1\n2013-01-01 05:15:00\n2013-12-31 23:59:00\n2013-07-04 09:15:00\n125557\n\n\narr_time\n0\n1\n2013-01-01 00:03:00\n2014-01-01 00:00:00\n2013-07-04 11:06:00\n220332\n\n\nsched_arr_time\n0\n1\n2013-01-01 00:05:00\n2013-12-31 23:59:00\n2013-07-04 11:20:00\n204384\n\n\n\n\n\n\n# Plot: Departure time\nggplot(flights_dt, aes(x = dep_time)) +\n  geom_histogram(binwidth = 3600, color = \"purple\", alpha = 0.7) +\n  labs(title = \"Departure Time Distribution\",\n       x = \"Departure Time\",\n       y = \"Frequency\")\n\n\n\n\n\n# Plot: Departure for each week\nflights_dt %&gt;% \n  count(week = ceiling_date(dep_time, \"week\")) %&gt;% \n  ggplot(aes(week, n)) +\n    geom_line(color = \"purple\") +\n    theme_minimal() +\n    labs(title = \"Flight Departure per Week\",\n         x = \"Week\",\n         y = \"Count\",\n         color = \"Line Color\")\n\n\n\n\n\n# Plot: Departure for each month\nflights_dt %&gt;% \n  count(month = ceiling_date(dep_time, \"month\")) %&gt;% \n  ggplot(aes(month, n)) +\n    geom_line(color = \"purple\") +\n    theme_minimal() +\n    labs(title = \"Flight Departure per Month\",\n         x = \"Month\",\n         y = \"Count\",\n         color = \"Line Color\")\n\n\n\n\nInstead of plotting the original departure time, we can round up to a nearby unit of time using ceiling_date(), and allows us to plot the number of flights per week and per month.\nReference:\n1. R for Data Science. https://r4ds.had.co.nz/dates-and-times.html\n2. How to Write Fuctions in R"
  },
  {
    "objectID": "function_of_the_week_ECHALUSE.html#is-it-helpful",
    "href": "function_of_the_week_ECHALUSE.html#is-it-helpful",
    "title": "lubridate::ceiling_date()",
    "section": "",
    "text": "Yes, it is useful in representing time in plots and can offer insights into patterns and/or trends over different time intervals. This can be especially true for large datasets where ceiling_date() can be used to simplify and group dates to provide a more concise and interpretable representation of trends. I don’t use this everyday, but I do think it is pretty neat!"
  },
  {
    "objectID": "function_of_the_week_McMonigal.html",
    "href": "function_of_the_week_McMonigal.html",
    "title": "n_distinct",
    "section": "",
    "text": "In this document, I will introduce the n_distinct() function from dplyr and show what it’s for.\n\n#load dplyr\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n#example dataset\ndata(starwars)\n\n\n\nThe n_distinct() function counts the number of unique values in a vector or set of vectors. It has two arguments:\n\n... : One or more vectors from your dataset.\nna.rm : Can equal TRUE or FALSE.\n\nThe default is na.rm = FALSE, meaning missing values are included in the count of distinct values by default. If TRUE, missing values will be excluded from the count of distinct values.\n\n\n\n\n#Let's see what is in our dataset.\nglimpse(starwars)\n\nRows: 87\nColumns: 14\n$ name       &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color &lt;chr&gt; \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color &lt;chr&gt; \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  &lt;chr&gt; \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        &lt;chr&gt; \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     &lt;chr&gt; \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  &lt;chr&gt; \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      &lt;list&gt; &lt;\"The Empire Strikes Back\", \"Revenge of the Sith\", \"Return…\n$ vehicles   &lt;list&gt; &lt;\"Snowspeeder\", \"Imperial Speeder Bike\"&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, \"Imp…\n$ starships  &lt;list&gt; &lt;\"X-wing\", \"Imperial shuttle\"&gt;, &lt;&gt;, &lt;&gt;, \"TIE Advanced x1\",…\n\n\n\n#Let's use n_distinct on a categorical variable, such as species.\nn_distinct(starwars$species)\n\n[1] 38\n\n\n\n#Let's examine how na.rm works.\nn_distinct(starwars$hair_color, na.rm = FALSE)\n\n[1] 13\n\n\n\n#Now let's change to na.rm = TRUE\nn_distinct(starwars$hair_color, na.rm = TRUE)\n\n[1] 12\n\n\n\n#Let's try with multiple vectors. Missing values will be included in the count.\nn_distinct(starwars$hair_color, starwars$eye_color)\n\n[1] 35\n\n\n\n#What are the distinct pairs?\nstarwars %&gt;% distinct(eye_color, hair_color)\n\n# A tibble: 35 × 2\n   eye_color hair_color   \n   &lt;chr&gt;     &lt;chr&gt;        \n 1 blue      blond        \n 2 yellow    &lt;NA&gt;         \n 3 red       &lt;NA&gt;         \n 4 yellow    none         \n 5 brown     brown        \n 6 blue      brown, grey  \n 7 blue      brown        \n 8 brown     black        \n 9 blue-gray auburn, white\n10 blue      auburn, grey \n# ℹ 25 more rows\n\n(tibble1 &lt;- starwars %&gt;% group_by(eye_color) %&gt;%\n  summarise(count = n_distinct(hair_color)))\n\n# A tibble: 15 × 2\n   eye_color     count\n   &lt;chr&gt;         &lt;int&gt;\n 1 black             2\n 2 blue              8\n 3 blue-gray         1\n 4 brown             4\n 5 dark              1\n 6 gold              1\n 7 green, yellow     1\n 8 hazel             2\n 9 orange            2\n10 pink              1\n11 red               2\n12 red, blue         1\n13 unknown           2\n14 white             1\n15 yellow            6\n\nsum(tibble1$count)\n\n[1] 35\n\n\n\n\n\nThe function n_distinct() is helpful for data exploration for categorical variables because it quickly counts the number of distinct values.\nHowever, n_distinct() on its own is not very powerful, and the function is more helpful when used in combination with other functions."
  },
  {
    "objectID": "function_of_the_week_McMonigal.html#what-is-it-for",
    "href": "function_of_the_week_McMonigal.html#what-is-it-for",
    "title": "n_distinct",
    "section": "",
    "text": "The n_distinct() function counts the number of unique values in a vector or set of vectors. It has two arguments:\n\n... : One or more vectors from your dataset.\nna.rm : Can equal TRUE or FALSE.\n\nThe default is na.rm = FALSE, meaning missing values are included in the count of distinct values by default. If TRUE, missing values will be excluded from the count of distinct values."
  },
  {
    "objectID": "function_of_the_week_McMonigal.html#example-using-starwars",
    "href": "function_of_the_week_McMonigal.html#example-using-starwars",
    "title": "n_distinct",
    "section": "",
    "text": "#Let's see what is in our dataset.\nglimpse(starwars)\n\nRows: 87\nColumns: 14\n$ name       &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color &lt;chr&gt; \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color &lt;chr&gt; \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  &lt;chr&gt; \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        &lt;chr&gt; \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     &lt;chr&gt; \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  &lt;chr&gt; \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      &lt;list&gt; &lt;\"The Empire Strikes Back\", \"Revenge of the Sith\", \"Return…\n$ vehicles   &lt;list&gt; &lt;\"Snowspeeder\", \"Imperial Speeder Bike\"&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, \"Imp…\n$ starships  &lt;list&gt; &lt;\"X-wing\", \"Imperial shuttle\"&gt;, &lt;&gt;, &lt;&gt;, \"TIE Advanced x1\",…\n\n\n\n#Let's use n_distinct on a categorical variable, such as species.\nn_distinct(starwars$species)\n\n[1] 38\n\n\n\n#Let's examine how na.rm works.\nn_distinct(starwars$hair_color, na.rm = FALSE)\n\n[1] 13\n\n\n\n#Now let's change to na.rm = TRUE\nn_distinct(starwars$hair_color, na.rm = TRUE)\n\n[1] 12\n\n\n\n#Let's try with multiple vectors. Missing values will be included in the count.\nn_distinct(starwars$hair_color, starwars$eye_color)\n\n[1] 35\n\n\n\n#What are the distinct pairs?\nstarwars %&gt;% distinct(eye_color, hair_color)\n\n# A tibble: 35 × 2\n   eye_color hair_color   \n   &lt;chr&gt;     &lt;chr&gt;        \n 1 blue      blond        \n 2 yellow    &lt;NA&gt;         \n 3 red       &lt;NA&gt;         \n 4 yellow    none         \n 5 brown     brown        \n 6 blue      brown, grey  \n 7 blue      brown        \n 8 brown     black        \n 9 blue-gray auburn, white\n10 blue      auburn, grey \n# ℹ 25 more rows\n\n(tibble1 &lt;- starwars %&gt;% group_by(eye_color) %&gt;%\n  summarise(count = n_distinct(hair_color)))\n\n# A tibble: 15 × 2\n   eye_color     count\n   &lt;chr&gt;         &lt;int&gt;\n 1 black             2\n 2 blue              8\n 3 blue-gray         1\n 4 brown             4\n 5 dark              1\n 6 gold              1\n 7 green, yellow     1\n 8 hazel             2\n 9 orange            2\n10 pink              1\n11 red               2\n12 red, blue         1\n13 unknown           2\n14 white             1\n15 yellow            6\n\nsum(tibble1$count)\n\n[1] 35"
  },
  {
    "objectID": "function_of_the_week_McMonigal.html#is-n_distinct-helpful",
    "href": "function_of_the_week_McMonigal.html#is-n_distinct-helpful",
    "title": "n_distinct",
    "section": "",
    "text": "The function n_distinct() is helpful for data exploration for categorical variables because it quickly counts the number of distinct values.\nHowever, n_distinct() on its own is not very powerful, and the function is more helpful when used in combination with other functions."
  },
  {
    "objectID": "presentations/function_of_the_week_CIRELL_ALFONSO.html",
    "href": "presentations/function_of_the_week_CIRELL_ALFONSO.html",
    "title": "dplyr::slice_sample",
    "section": "",
    "text": "Please sign up for a function here (Enter your name and the week you want to present): function_of_the_week_signup_2024\nFor this assignment, please submit both the .qmd and the .html files. I will add it to the website. Remove your name from the qmd if you do not wish it shared or let us know if it is okay to post in anonymously.\nMake sure to update the title, description, author, and date in the yaml above.\nPrevious years’ Functions of the Week can be found on the previous class websites:\n\nhttps://sph-r-programming-2023.netlify.app/functions/\nhttps://sph-r-programming-2022.netlify.app/functions/\nhttps://sph-r-programming.netlify.app/functions/ (2021)\n\nIf you select a function which was presented previously, please develop your own examples and content."
  },
  {
    "objectID": "presentations/function_of_the_week_CIRELL_ALFONSO.html#what-is-it-for",
    "href": "presentations/function_of_the_week_CIRELL_ALFONSO.html#what-is-it-for",
    "title": "dplyr::slice_sample",
    "section": "2.1 What is it for?",
    "text": "2.1 What is it for?\nSlice_sample( ) from the dplyr package randomly selects a row from a dataset.\n\nslice_sample(mtcars)\n\n         mpg cyl disp  hp drat   wt  qsec vs am gear carb\nValiant 18.1   6  225 105 2.76 3.46 20.22  1  0    3    1\n\n\nThere are various useful arguments in the slice_sample( ) function. We can add n to select a set number of rows.\n\nslice_sample(mtcars,n=5)\n\n                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMaserati Bora      15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nToyota Corona      21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nCadillac Fleetwood 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLotus Europa       30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nMerc 280C          17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n\n\nWe can also use prop if we want to sample a proportion of samples available in the data set.\n\nslice_sample(mtcars, prop=0.25)\n\n                  mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710       22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nPontiac Firebird 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nMazda RX4        21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nFerrari Dino     19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMerc 280C        17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nAMC Javelin      15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nHonda Civic      30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nLotus Europa     30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n\n\nThe default has it where replacement is false.\n\nslice_sample(mtcars, n=6,\n             replace= TRUE)\n\n                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMerc 450SE...1     16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nToyota Corona      21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFord Pantera L...3 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFord Pantera L...4 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nMerc 280C          17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE...6     16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n\n\nLastly, we can add weight_by to add sampling weights to any non-negative vectors.\n\nslice_sample(mtcars, n=5, weight_by = wt)\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4"
  },
  {
    "objectID": "presentations/function_of_the_week_CIRELL_ALFONSO.html#is-it-helpful",
    "href": "presentations/function_of_the_week_CIRELL_ALFONSO.html#is-it-helpful",
    "title": "dplyr::slice_sample",
    "section": "2.2 Is it helpful?",
    "text": "2.2 Is it helpful?\n\nThis function is definitely helpful. In larger data set, we can get a smaller random sample fairly easily."
  },
  {
    "objectID": "function_of_the_week_CIRELL_ALFONSO.html",
    "href": "function_of_the_week_CIRELL_ALFONSO.html",
    "title": "dplyr::slice_sample",
    "section": "",
    "text": "Please sign up for a function here (Enter your name and the week you want to present): function_of_the_week_signup_2024\nFor this assignment, please submit both the .qmd and the .html files. I will add it to the website. Remove your name from the qmd if you do not wish it shared or let us know if it is okay to post in anonymously.\nMake sure to update the title, description, author, and date in the yaml above.\nPrevious years’ Functions of the Week can be found on the previous class websites:\n\nhttps://sph-r-programming-2023.netlify.app/functions/\nhttps://sph-r-programming-2022.netlify.app/functions/\nhttps://sph-r-programming.netlify.app/functions/ (2021)\n\nIf you select a function which was presented previously, please develop your own examples and content."
  },
  {
    "objectID": "function_of_the_week_CIRELL_ALFONSO.html#what-is-it-for",
    "href": "function_of_the_week_CIRELL_ALFONSO.html#what-is-it-for",
    "title": "dplyr::slice_sample",
    "section": "2.1 What is it for?",
    "text": "2.1 What is it for?\nSlice_sample( ) from the dplyr package randomly selects a row from a dataset.\n\nslice_sample(mtcars)\n\n               mpg cyl  disp hp drat    wt  qsec vs am gear carb\nToyota Corona 21.5   4 120.1 97  3.7 2.465 20.01  1  0    3    1\n\n\nThere are various useful arguments in the slice_sample( ) function. We can add n to select a set number of rows.\n\nslice_sample(mtcars,n=5)\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n\n\nWe can also use prop if we want to sample a proportion of samples available in the data set.\n\nslice_sample(mtcars, prop=0.25)\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n\n\nThe default has it where replacement is false.\n\nslice_sample(mtcars, n=6,\n             replace= TRUE)\n\n                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet 4 Drive...1 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nToyota Corona      21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nPorsche 914-2      26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nCamaro Z28         13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nHornet 4 Drive...5 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nVolvo 142E         21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nLastly, we can add weight_by to add sampling weights to any non-negative vectors.\n\nslice_sample(mtcars, n=5, weight_by = wt)\n\n                     mpg cyl disp  hp drat    wt  qsec vs am gear carb\nFerrari Dino        19.7   6  145 175 3.62 2.770 15.50  0  1    5    6\nDodge Challenger    15.5   8  318 150 2.76 3.520 16.87  0  0    3    2\nLincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4\nCadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4\nDuster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4"
  },
  {
    "objectID": "function_of_the_week_CIRELL_ALFONSO.html#is-it-helpful",
    "href": "function_of_the_week_CIRELL_ALFONSO.html#is-it-helpful",
    "title": "dplyr::slice_sample",
    "section": "2.2 Is it helpful?",
    "text": "2.2 Is it helpful?\n\nThis function is definitely helpful. In larger data set, we can get a smaller random sample fairly easily."
  },
  {
    "objectID": "function_of_the_week_Chapela.html",
    "href": "function_of_the_week_Chapela.html",
    "title": "Function of the Week:",
    "section": "",
    "text": "In this document, I will introduce the get_dupes() function and show what it’s for. This function is part of the janitor package so will need to load janitor first.\n\n#loading janitor\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\n\n\n\nThis function is quite simple but useful, specially when we are working with big data frames. It basically identifies duplicate rows in a given data frame.\n\n\nHere is an example to illustrate how it works:\n\n\nFirst, I will input a data frame which I will call example:\n\n\nexample &lt;- data.frame(\n  ID = c(01,02,03,04,05,06,07,08,09,10,06,12,13,07,15,16,17,06),\n  group = c(\"T\", \"T\", \"C\", \"C\", \"C\", \"T\", \"T\", \"C\", \"T\", \"C\", \"C\", \"C\", \"T\", \"T\", \"C\", \"C\",\"T\",\"C\"),\n  age = c(26, 26, 22, 25, 29, 33, 26, 32, 33, 31, 35, 32, 24, 25, 28, 20, 29, 35))\nexample\n\n   ID group age\n1   1     T  26\n2   2     T  26\n3   3     C  22\n4   4     C  25\n5   5     C  29\n6   6     T  33\n7   7     T  26\n8   8     C  32\n9   9     T  33\n10 10     C  31\n11  6     C  35\n12 12     C  32\n13 13     T  24\n14  7     T  25\n15 15     C  28\n16 16     C  20\n17 17     T  29\n18  6     C  35\n\n\n\nSince this is a small data frame, we can visually inspect it and notice that participants with ID numbers 6 and 7 are repeated. However, if our data set were larger, identifying duplicates visually would be a tedious and error-prone process.\n\n\nNow, we can use get_dupes() following this format: get_dupes (dat, ...) where:\n\n\ndat name of the data frame\n\n\n... names of the variables to search for duplicates (unquoted)\n\n\nget_dupes(example, ID)\n\n  ID dupe_count group age\n1  6          3     T  33\n2  6          3     C  35\n3  6          3     C  35\n4  7          2     T  26\n5  7          2     T  25\n\n\n\nThe output will give us the rows with duplicate records in the specified variable (ID) and a count of the duplicates (dupe_count)\n\n\nWe corroborated here that ID number 6 is repeated 3 times and ID 7 is repeated 2 times.\n\n\nWe can also use pipes with the get_dupes function:\n\n\nexample |&gt;\n  get_dupes(age)\n\n   age dupe_count ID group\n1   26          3  1     T\n2   26          3  2     T\n3   26          3  7     T\n4   25          2  4     C\n5   25          2  7     T\n6   29          2  5     C\n7   29          2 17     T\n8   32          2  8     C\n9   32          2 12     C\n10  33          2  6     T\n11  33          2  9     T\n12  35          2  6     C\n13  35          2  6     C\n\n\n\nThe output will provide us with the duplicates for age. We can observe that it will order them in descending order, with the most frequently repeated observations appearing at the top of the table. Here, we notice that age 26 is repeated 3 times, age 25 is repeated 2 times, and so forth. This results are not very informative, so we need to be careful to select a meaningful variable to account for duplicates.\n\n\nIf we don’t specify any variables, get_dupes will look for duplicates using all columns\n\n\nexample |&gt;\n  get_dupes()\n\nNo variable names specified - using all columns.\n\n\n  ID group age dupe_count\n1  6     C  35          2\n2  6     C  35          2\n\n\n\nHere, we have two rows with the exact same values in all columns.\n\n\nWe can also use tidyselect helpers. For example, we can look for duplicates among all variables except age:\n\n\nexample |&gt;\n  get_dupes(-age)\n\n  ID group dupe_count age\n1  6     C          2  35\n2  6     C          2  35\n3  7     T          2  26\n4  7     T          2  25\n\n\n\nEven though the output displays a column for age, it is not accounting for the repeated age records as it did before.\n\n\n\n\n\nYes, this function can save us a lot of time during the data cleaning process. I use it at early stages of data analysis to identify potential coding errors. For me, it is especially useful to use it before merging datasets to ensure we have only one ID code per subject."
  },
  {
    "objectID": "function_of_the_week_Chapela.html#what-is-it-for",
    "href": "function_of_the_week_Chapela.html#what-is-it-for",
    "title": "Function of the Week:",
    "section": "",
    "text": "This function is quite simple but useful, specially when we are working with big data frames. It basically identifies duplicate rows in a given data frame.\n\n\nHere is an example to illustrate how it works:\n\n\nFirst, I will input a data frame which I will call example:\n\n\nexample &lt;- data.frame(\n  ID = c(01,02,03,04,05,06,07,08,09,10,06,12,13,07,15,16,17,06),\n  group = c(\"T\", \"T\", \"C\", \"C\", \"C\", \"T\", \"T\", \"C\", \"T\", \"C\", \"C\", \"C\", \"T\", \"T\", \"C\", \"C\",\"T\",\"C\"),\n  age = c(26, 26, 22, 25, 29, 33, 26, 32, 33, 31, 35, 32, 24, 25, 28, 20, 29, 35))\nexample\n\n   ID group age\n1   1     T  26\n2   2     T  26\n3   3     C  22\n4   4     C  25\n5   5     C  29\n6   6     T  33\n7   7     T  26\n8   8     C  32\n9   9     T  33\n10 10     C  31\n11  6     C  35\n12 12     C  32\n13 13     T  24\n14  7     T  25\n15 15     C  28\n16 16     C  20\n17 17     T  29\n18  6     C  35\n\n\n\nSince this is a small data frame, we can visually inspect it and notice that participants with ID numbers 6 and 7 are repeated. However, if our data set were larger, identifying duplicates visually would be a tedious and error-prone process.\n\n\nNow, we can use get_dupes() following this format: get_dupes (dat, ...) where:\n\n\ndat name of the data frame\n\n\n... names of the variables to search for duplicates (unquoted)\n\n\nget_dupes(example, ID)\n\n  ID dupe_count group age\n1  6          3     T  33\n2  6          3     C  35\n3  6          3     C  35\n4  7          2     T  26\n5  7          2     T  25\n\n\n\nThe output will give us the rows with duplicate records in the specified variable (ID) and a count of the duplicates (dupe_count)\n\n\nWe corroborated here that ID number 6 is repeated 3 times and ID 7 is repeated 2 times.\n\n\nWe can also use pipes with the get_dupes function:\n\n\nexample |&gt;\n  get_dupes(age)\n\n   age dupe_count ID group\n1   26          3  1     T\n2   26          3  2     T\n3   26          3  7     T\n4   25          2  4     C\n5   25          2  7     T\n6   29          2  5     C\n7   29          2 17     T\n8   32          2  8     C\n9   32          2 12     C\n10  33          2  6     T\n11  33          2  9     T\n12  35          2  6     C\n13  35          2  6     C\n\n\n\nThe output will provide us with the duplicates for age. We can observe that it will order them in descending order, with the most frequently repeated observations appearing at the top of the table. Here, we notice that age 26 is repeated 3 times, age 25 is repeated 2 times, and so forth. This results are not very informative, so we need to be careful to select a meaningful variable to account for duplicates.\n\n\nIf we don’t specify any variables, get_dupes will look for duplicates using all columns\n\n\nexample |&gt;\n  get_dupes()\n\nNo variable names specified - using all columns.\n\n\n  ID group age dupe_count\n1  6     C  35          2\n2  6     C  35          2\n\n\n\nHere, we have two rows with the exact same values in all columns.\n\n\nWe can also use tidyselect helpers. For example, we can look for duplicates among all variables except age:\n\n\nexample |&gt;\n  get_dupes(-age)\n\n  ID group dupe_count age\n1  6     C          2  35\n2  6     C          2  35\n3  7     T          2  26\n4  7     T          2  25\n\n\n\nEven though the output displays a column for age, it is not accounting for the repeated age records as it did before."
  },
  {
    "objectID": "function_of_the_week_Chapela.html#is-it-helpful",
    "href": "function_of_the_week_Chapela.html#is-it-helpful",
    "title": "Function of the Week:",
    "section": "",
    "text": "Yes, this function can save us a lot of time during the data cleaning process. I use it at early stages of data analysis to identify potential coding errors. For me, it is especially useful to use it before merging datasets to ensure we have only one ID code per subject."
  },
  {
    "objectID": "function_of_the_week_Clem_write.xlsx.html",
    "href": "function_of_the_week_Clem_write.xlsx.html",
    "title": "openxlsx::write.xlsx()",
    "section": "",
    "text": "In this document, I will introduce the write.xlsx() function and show what it’s for.\n\nlibrary(openxlsx)\nlibrary(here)\n\nhere() starts at /Users/niederha/Library/CloudStorage/OneDrive-OregonHealth&ScienceUniversity/teaching/BSTA 526/BSTA_526_shared/webpage/Function_of_the_week_BSTA526_W24\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\ndata(penguins)\n\n\n\nWrite write.xlsx() allows you to save the data frames you have created and modified as new excel sheets.\nLet’s say you want to create a separate excel sheet for a specific group. In this example we’ll take the palmerspenguins data set and make a new excel sheet with only the Adelie penguins.\n\n#filter for Adelie penguins \npenguins_adelie &lt;- penguins %&gt;%\n  filter(species == \"Adelie\")%&gt;%\n  print()\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n#save as new excel sheet\nwrite.xlsx(penguins_adelie, \n           file = \"penguins_adeile.xlsx\")\n\nThe excel file is only useful if you know where it is! You can also use write.xlsx with the here() function to help specify a specific location you would like to save the new excel file. For example I can use here() to specify that I want to save the excel file to my BSTA 526 folder so it makes it easier to find later.\n\n#to save in functions of the week folder \nwrite.xlsx(penguins_adelie, \n           file = here(\"penguins_adiele.xlsx\"))\n\nYou can also use write.xlsx to write overwrite an existing file with the overwrite argument. For example, I want to create a data frame from the palmerpenguins data set that only has Adelie penguins that live on Torgersen and overwrite our existing file we created above.\n\n#filtering for island Torgersen\npenguins_adelie_torgersen &lt;- penguins_adelie %&gt;%\n  filter(island == \"Torgersen\")%&gt;%\n  print\n\n# A tibble: 52 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 42 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n#to overwrite previous file \nwrite.xlsx(penguins_adelie_torgersen, \n           file = here(\"penguins_adiele.xlsx\"),\n           overwrite = TRUE)\n\n\n\n\nwrite.xlsx() is straightforward and helpful tool since it allows you to save excel sheets of data you have cleaned and/or modified. I could see this being extremely helpful if you need to share cleaned excel sheets of the data with other people or publishers. While it could be useful to use the overwrite argument to overwrite messy excel files this may not be in best practice."
  },
  {
    "objectID": "function_of_the_week_Clem_write.xlsx.html#what-is-it-for",
    "href": "function_of_the_week_Clem_write.xlsx.html#what-is-it-for",
    "title": "openxlsx::write.xlsx()",
    "section": "",
    "text": "Write write.xlsx() allows you to save the data frames you have created and modified as new excel sheets.\nLet’s say you want to create a separate excel sheet for a specific group. In this example we’ll take the palmerspenguins data set and make a new excel sheet with only the Adelie penguins.\n\n#filter for Adelie penguins \npenguins_adelie &lt;- penguins %&gt;%\n  filter(species == \"Adelie\")%&gt;%\n  print()\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n#save as new excel sheet\nwrite.xlsx(penguins_adelie, \n           file = \"penguins_adeile.xlsx\")\n\nThe excel file is only useful if you know where it is! You can also use write.xlsx with the here() function to help specify a specific location you would like to save the new excel file. For example I can use here() to specify that I want to save the excel file to my BSTA 526 folder so it makes it easier to find later.\n\n#to save in functions of the week folder \nwrite.xlsx(penguins_adelie, \n           file = here(\"penguins_adiele.xlsx\"))\n\nYou can also use write.xlsx to write overwrite an existing file with the overwrite argument. For example, I want to create a data frame from the palmerpenguins data set that only has Adelie penguins that live on Torgersen and overwrite our existing file we created above.\n\n#filtering for island Torgersen\npenguins_adelie_torgersen &lt;- penguins_adelie %&gt;%\n  filter(island == \"Torgersen\")%&gt;%\n  print\n\n# A tibble: 52 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 42 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n#to overwrite previous file \nwrite.xlsx(penguins_adelie_torgersen, \n           file = here(\"penguins_adiele.xlsx\"),\n           overwrite = TRUE)"
  },
  {
    "objectID": "function_of_the_week_Clem_write.xlsx.html#is-it-helpful",
    "href": "function_of_the_week_Clem_write.xlsx.html#is-it-helpful",
    "title": "openxlsx::write.xlsx()",
    "section": "",
    "text": "write.xlsx() is straightforward and helpful tool since it allows you to save excel sheets of data you have cleaned and/or modified. I could see this being extremely helpful if you need to share cleaned excel sheets of the data with other people or publishers. While it could be useful to use the overwrite argument to overwrite messy excel files this may not be in best practice."
  }
]